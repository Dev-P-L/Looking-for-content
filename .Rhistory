# In the YAML, I have asked a TOC (table of contents).
# I have also chosen to produce an html_document.
# In the opts_chunk just below, I have chosen options to avoid messages and warnings in SA_Amazon_Insights&Results.html. Messages and warnings produced by the code have already been dealt with.
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
# The next opts_chunk regulates figure layout.
knitr::opts_chunk$set(out.width = "60%", fig.align = "center")
# The next instruction facilitates table layout in HTML.
options(knitr.table.format = "html")
# After the present chunk, there are 13 lines of code to further regulate layout:
# - the 1st block prevents bullets appearing in the TOC (Table of Contents);
# - the 2nd block determines font size in body text parts;
# - the 3rd block generates text justification.
# Last about layout, I use the string <br> to generate empty lines.
# Cleaning up workspace for RAM management.
invisible(if(!is.null(dev.list())) dev.off())
rm(list=ls())
cat("\014")
# Downloading packages.
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(tm)) install.packages("tm", repos = "http://cran.us.r-project.org")
if(!require(SnowballC)) install.packages("SnowballC", repos = "http://cran.us.r-project.org")
if(!require(wordcloud)) install.packages("wordcloud", repos = "http://cran.us.r-project.org")
if(!require(RColorBrewer)) install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
if(!require(caTools)) install.packages("caTools", repos = "http://cran.us.r-project.org")
if(!require(rpart)) install.packages("rpart", repos = "http://cran.us.r-project.org")
if(!require(rpart.plot)) install.packages("rpart.plot", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(kernlab)) install.packages("kernlab", repos = "http://cran.us.r-project.org")
if(!require(fastAdaboost)) install.packages("fastAdaboost", repos = "http://cran.us.r-project.org")
if(!require(randomForest)) install.packages("randomForest", repos = "http://cran.us.r-project.org")
if(!require(gbm)) install.packages("gbm", repos = "http://cran.us.r-project.org")
if(!require(xgboost)) install.packages("xgboost", repos = "http://cran.us.r-project.org")
if(!require(monmlp)) install.packages("monmlp", repos = "http://cran.us.r-project.org")
if(!require(kableExtra)) install.packages("kableExtra", repos = "http://cran.us.r-project.org")
if(!require(gridExtra)) install.packages("gridExtra", repos = "http://cran.us.r-project.org")
if(!require(utf8)) install.packages("utf8", repos = "http://cran.us.r-project.org")
# Requiring libraries.
library(tidyverse)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(caTools)
library(rpart)
library(rpart.plot)
library(caret)
library(kernlab)
library(fastAdaboost)
library(randomForest)
library(gbm)
library(xgboost)
library(monmlp)
library(kableExtra)
library(gridExtra)
library(utf8)
myfile <- "https://raw.githubusercontent.com/Dev-P-L/Sentiment-Analysis/master/amazon_cells_labelled.txt"
reviews <- read.delim(myfile, header = FALSE, sep = "\t", quote = "",
stringsAsFactors = FALSE)
rm(myfile)
reviews <- reviews %>%
`colnames<-`(c("text", "sentiment")) %>%
mutate(sentiment = as.factor(gsub("1", " Pos",
gsub("0", "Neg", sentiment)))) %>% as.data.frame()
# Creating training index and validation index.
set.seed(1)
ind_train <- createDataPartition(y = reviews$sentiment,
times = 1, p = 2/3, list = FALSE)
ind_val <- as.integer(setdiff(1:nrow(reviews), ind_train))
# ind_train allows to select the reviews that will be used for training,
# be it in NLP, in text mining or in ML.
# For presentation in a table, selecting a few reviews at random
# from the training reviews. First retrieving training reviews.
df <- reviews[ind_train, ] %>% as.data.frame() %>%
`rownames<-`(ind_train) %>% mutate(ro = rownames(.))
# Then sampling with indication of the row numbers from the whole dataset.
set.seed(1)
seq <- createDataPartition(y = df$sentiment,
times = 1, p = 12/length(ind_train), list = FALSE)
sampl <- df[seq, ] %>% as.data.frame() %>%
select(ro, text, sentiment) %>% `rownames<-`(NULL)
# Building presentation table.
tab <- sampl %>% as.data.frame() %>%
`colnames<-`(c("", "ILLUSTRATIVE SAMPLE OF TRAINING REVIEWS", "SENTIMENT"))
knitr::kable(tab, "html", align = "c") %>%
kable_styling(bootstrap_options = "bordered",
full_width = F, font_size = 16) %>%
column_spec(1, bold = T, color = "#808080") %>%
column_spec(2:3, bold = T, color = "#08457E", background = "#9bc4e2")
rm(df, seq, sampl, tab)
# Avoiding messages and warnings: anyway, they have already been dealt with.
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
# Regulating figure layout.
knitr::opts_chunk$set(out.width = "60%", fig.align = "center")
# Facilitating table layout in HTML.
options(knitr.table.format = "html")
# After the present chunk, there are 13 lines of code to further regulate layout:
# - the 1st block prevents bullets appearing in the TOC (Table of Contents);
# - the 2nd block determines font size in body text parts;
# - the 3rd block generates text justification.
# Output language
Sys.setlocale("LC_ALL", "C")
# Cleaning up workspace for RAM management.
invisible(if(!is.null(dev.list())) dev.off())
rm(list=ls())
cat("\014")
# Downloading packages.
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(utf8)) install.packages("utf8", repos = "http://cran.us.r-project.org")
if(!require(lubridate)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(tm)) install.packages("tm", repos = "http://cran.us.r-project.org")
if(!require(wordcloud)) install.packages("wordcloud", repos = "http://cran.us.r-project.org")
if(!require(kableExtra)) install.packages("kableExtra", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(pROC)) install.packages("pROC", repos = "http://cran.us.r-project.org")
# Requiring libraries.
library(tidyverse)
library(utf8)
library(lubridate)
library(tm)
library(wordcloud)
library(kableExtra)
library(caret)
library(pROC)
ds <- read.csv("ds.csv", encoding = "UTF-8") %>%
select(- 1)
str(ds, vec.len = 1)
# Avoiding messages and warnings: anyway, they have already been dealt with.
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Regulating figure layout.
knitr::opts_chunk$set(out.width = "60%", fig.align = "center")
# Facilitating table layout in HTML.
options(knitr.table.format = "html")
# Output language
invisible(Sys.setlocale("LC_ALL", "C"))
example <- data_frame(line = c(1, 2, 3, 4),
text = c("Roses are red,",
"Violets are blue,",
"Sugar is sweet,",
"And so are you."))
# Avoiding messages and warnings: anyway, they have already been dealt with.
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Regulating figure layout.
knitr::opts_chunk$set(out.width = "60%", fig.align = "center")
# Facilitating table layout in HTML.
options(knitr.table.format = "html")
# Output language
invisible(Sys.setlocale("LC_ALL", "C"))
# Cleaning up workspace for RAM management.
invisible(if(!is.null(dev.list())) dev.off())
rm(list=ls())
cat("\014")
# Downloading packages.
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(dslabs)) install.packages("dslabs", repos = "http://cran.us.r-project.org")
if(!require(utf8)) install.packages("utf8", repos = "http://cran.us.r-project.org")
if(!require(lubridate)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(scales)) install.packages("scales", repos = "http://cran.us.r-project.org")
if(!require(tm)) install.packages("tm", repos = "http://cran.us.r-project.org")
if(!require(wordcloud)) install.packages("wordcloud", repos = "http://cran.us.r-project.org")
if(!require(kableExtra)) install.packages("kableExtra", repos = "http://cran.us.r-project.org")
if(!require(gridExtra)) install.packages("gridExtra", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(pROC)) install.packages("pROC", repos = "http://cran.us.r-project.org")
if(!require(ggthemes)) install.packages("ggthemes", repos = "http://cran.us.r-project.org")
if(!require(tidytext)) install.packages("tidytext", repos = "http://cran.us.r-project.org")
# Requiring libraries.
library(tidyverse)
library(dslabs)
library(utf8)
library(lubridate)
library(scales)
library(tm)
library(wordcloud)
library(kableExtra)
library(gridExtra)
library(caret)
library(pROC)
library(ggthemes)
library(tidytext)
data("trump_tweets")
tweets <- trump_tweets
str(tweets, vec.len = 1)
df <- tweets %>% select(text) %>% head
df
rm(df)
tweets %>% count(source) %>% arrange(desc(n))
df <- tweets %>% select(source, is_retweet) %>%
group_by(source) %>%
summarize(nr_retweet = length(is_retweet[is_retweet == TRUE]))
df
rm(df)
df <- trump_tweets %>%
extract(source, "source", "Twitter for (.*)") %>%
count(source)
df
rm(df)
library(stringr)
elect_tweets <- tweets %>%
mutate(device = str_replace(str_replace(source, "Twitter for Android",                    "Android"), "Twitter for iPhone", "iPhone")) %>%
filter(device %in% c("Android", "iPhone") &
created_at >= ymd("2015-06-17") &
created_at < ymd("2016-11-08")) %>%
mutate(am_pm = gsub('[0-9: ]+','\\1',format(created_at, '%r'))) %>%
arrange(created_at) %>%
select(- source) %>%
select(device, everything())
# The palette with grey:
cbbPalette <- c("#E69F00", "#0072B2", "#000000", "#56B4E9",
"#009E73", "#F0E442",  "#D55E00", "#CC79A7")
graph <- elect_tweets %>%
mutate(hour = hour(with_tz(created_at, "EST"))) %>%
select(device, am_pm) %>%
group_by(device, am_pm) %>%
summarise(n = n()) %>%
mutate(percent = n / sum(n)) %>%
ggplot(aes(device, percent, fill = am_pm)) +
geom_bar(width = 0.5, stat = "identity") +
scale_y_continuous(labels = percent_format(suffix = " %")) +
labs(x = "",
y = "% of Tweets per Device",
fill = "Parts of the Day") +
theme_economist(base_size = 12) +
scale_fill_manual(values = cbbPalette) +
theme(panel.background = element_rect(fill = "#56B4E9"))
graph
# The palette with grey:
# Orange, blue, black, light blue, green, yellow, vermilion, reddish purple
cbbPalette <- c("#E69F00", "#0072B2", "#000000", "#56B4E9",
"#009E73", "#F0E442",  "#D55E00", "#CC79A7")
graph <- elect_tweets %>%
mutate(hour = hour(with_tz(created_at, "EST"))) %>%
select(device, hour) %>%
group_by(device, hour) %>%
summarise(n = n()) %>%
mutate(percent = n / sum(n)) %>%
ggplot(aes(hour, percent, color = device)) +
geom_point(aes(size = percent)) +
scale_y_continuous(labels =
percent_format(accuracy = 1, suffix = " %")) +
labs(x = "Hour of day (EST)",
y = "% of tweets",
color = "") +
theme_economist(base_size = 12) +
scale_colour_manual(values = cbbPalette) +
theme(panel.background = element_rect(fill = "#56B4E9"))
graph
knitr::opts_chunk$set(out.width = "100%", fig.align = "center")
buffer <- elect_tweets %>%
mutate(day = floor_date(with_tz(created_at, "EST"), unit = "day")) %>%
mutate(hour = floor_date(with_tz(created_at, "EST"), unit = "hour"))
sample <- buffer %>%
group_by(day) %>%
summarize(n = n()) %>%
arrange(desc(n)) %>%
head(12) %>%
arrange(day)
v <- sample %>% .$day
percentage <-
label_percent(accuracy = 0.1, suffix = " %")(sum(sample$n) / nrow(buffer))
l <- list(1)
for (i in 1:length(v)) {
d <- v[i]
graph <- buffer %>%
filter(day == d) %>%
select(device, hour) %>%
group_by(device, hour) %>%
summarise(n = n()) %>%
ggplot(aes(hour, n, color = device)) +
geom_point(aes(size = n)) +
ggtitle(paste("Busy Day", i, ":", d, sep = " ")) +
labs(x = "",
y = "# of Tweets",
color = "") +
theme_economist() +
scale_colour_manual(values = cbbPalette) +
theme(panel.background = element_rect(fill = "#56B4E9"))
l[[i]] <- graph
}
marrangeGrob(l, nrow = 1, ncol = 1,
top = "")
knitr::opts_chunk$set(out.width = "60%", fig.align = "center")
graph <- elect_tweets %>%
mutate(month = round_date(with_tz(created_at, "EST"), unit = "month")) %>%
select(device, month, am_pm) %>%
filter(device == "Android") %>%
group_by(month, am_pm) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
ggplot(aes(month, percent, fill = am_pm)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = percent_format(suffix = " %")) +
labs(x = "",
y = "% of Tweets per Device",
fill = "Parts of the Day") +
theme_economist(base_size = 12) +
scale_fill_manual(values = cbbPalette) +
theme(panel.background = element_rect(fill = "#56B4E9"))
graph
graph <- elect_tweets %>%
mutate(month = round_date(with_tz(created_at, "EST"), unit = "month")) %>%
select(device, month, am_pm) %>%
filter(device == "iPhone") %>%
group_by(month, am_pm) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
ggplot(aes(month, percent, fill = am_pm)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = percent_format(suffix = " %")) +
labs(x = "",
y = "% of Tweets per Device",
fill = "Parts of the Day") +
theme_economist(base_size = 12) +
scale_fill_manual(values = cbbPalette) +
theme(panel.background = element_rect(fill = "#56B4E9"))
graph
graph <- elect_tweets %>%
mutate(week = round_date(with_tz(created_at, "EST"), unit = "week")) %>%
select(device, week) %>%
group_by(device, week) %>%
summarize(n = n()) %>%
ggplot(aes(week, n, color = device)) +
geom_line(size = 2) +
labs(x = "",
y = "% of Tweets per Device",
color = "") +
theme_economist(base_size = 12) +
scale_colour_manual(values = cbbPalette) +
theme(panel.background = element_rect(fill = "#56B4E9"))
graph
example <- data_frame(line = c(1, 2, 3, 4),
text = c("Roses are red,",
"Violets are blue,",
"Sugar is sweet,",
"And so are you."))
example
example %>% unnest_tokens(word, text)
example <- data_frame(line = c(1, 2, 3, 4),
text = c("Roses are red,",
"Violets are blue,",
"Sugar is sweet,",
"And so are you."))
example
example %>% unnest_tokens(word, text)
example
example <- data_frame(line = c(1, 2, 3, 4),
text = c("Roses are red,",
"Violets are blue,",
"Sugar is sweet,",
"And so are you."))
example
example %>% unnest_tokens(word, text)
example
example <- data_frame(line = c(1, 2, 3, 4),
text = c("Roses are red,",
"Violets are blue,",
"Sugar is sweet,",
"And so are you."))
example
example %>% unnest_tokens(word, example$text)
example <- data_frame(line = c(1, 2, 3, 4),
text = c("Roses are red,",
"Violets are blue,",
"Sugar is sweet,",
"And so are you."))
example
example %>% unnest_tokens(word, as.character(example$text))
text = c("Roses are red,",
"Violets are blue,",
"Sugar is sweet,",
"And so are you.")
example %>% unnest_tokens(word, text)
example
text = c("Roses are red,",
"Violets are blue,",
"Sugar is sweet,",
"And so are you.")
example %>% unnest_tokens(word, text)
example
unnest_tokens(word, text)
example <- data_frame(line = c(1, 2, 3, 4),
text = c("Roses are red,", "Violets are blue,", "Sugar is sweet,", "And so are you."))
example
example %>% unnest_tokens(word, text
example <- data_frame(line = c(1, 2, 3, 4),
example <- data_frame(line = c(1, 2, 3, 4),
text = c("Roses are red,", "Violets are blue,", "Sugar is sweet,", "And so are you."))
example
example %>% unnest_tokens(word, text)
campaign_tweets$text[i]
i <- 3008
elect_tweets$text[i]
elect_tweets[i,]
elect_tweets[i,] %>%
unnest_tokens(word, text)
elect_tweets$text[i]
i <- 3008
elect_tweets$text[i]
pattern <- "([^A-Za-z\\d#@']|'(?![A-Za-z\\d#@]))"
elect_tweets[i,] %>%
unnest_tokens(word, text, token = "regex", pattern = pattern) %>%
select(word)
i <- 3008
elect_tweets$text[i]
i <- 3008
elect_tweets$text[i]
pattern <- "([^A-Za-z\\d#@']|'(?![A-Za-z\\d#@]))"
elect_tweets[i,] %>%
mutate(text = str_replace_all(text, "https://t.co/[A-Za-z\\d]+|&amp;", ""))  %>%
unnest_tokens(word, text, token = "regex", pattern = pattern) %>%
select(word)
elect_tweets$text[3008]
text <- elect_tweets$text[3008]
unnest_tokens(word, text)
elect_tweets$text[3008]
unnest_tokens(word, elect_tweets$text[3008])
elect_tweets$text[3008]
v <- elect_tweets$text
unnest_tokens(word, v)
v <- elect_tweets$text
v %>% unnest_tokens(word, v)
v <- elect_tweets$text
v %>% unnest_tokens(word, .)
elect_tweets %>% unnest_tokens(word, text)
v <- data.frame(text = elect_tweets$text)
v %>% unnest_tokens(word, text)
