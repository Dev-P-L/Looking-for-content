mutate(text = sapply(text, utf8_normalize, map_quote = TRUE))
# Otherwise curly apostrophes remain.
str(tweets, vec.len = 1)
sum(tweets$is_retweet)
sum(is.na(tweets$in_reply_to_user_id_str))/nrow(tweets)
buffer <- tweets %>%
mutate(device = str_replace_all(
str_replace_all(source, "Twitter for Android", "Android"),
"Twitter for iPhone", "iPhone")) %>%
filter(device %in% c("Android", "iPhone") &
created_at >= ymd("2015-06-17") &
created_at < ymd("2016-11-08")) %>%
select(- is_retweet, - source)
rm(tweets)
buffer %>%
group_by(device) %>%
summarise(n = n()) %>%
arrange(desc(n))
set.seed(1)
ind_val <- createDataPartition(y = buffer$device,
times = 1, p = 1/3, list = FALSE)
ind_train <- as.integer(setdiff(1:nrow(buffer), ind_val))
train_tweets <- buffer[ind_train, ]
val_tweets <- buffer[ind_val, ]
rm(buffer)
train_tweets %>%
group_by(device) %>%
summarise(n = n()) %>%
arrange(desc(n))
train_tweets <- train_tweets %>%
mutate(month = floor_date(with_tz(created_at, "EST"), unit = "month")) %>%
mutate(week = floor_date(with_tz(created_at, "EST"), unit = "week")) %>%
mutate(day = floor_date(with_tz(created_at, "EST"), unit = "day")) %>%
mutate(hour = hour(with_tz(created_at, "EST"))) %>%
mutate(am_pm = gsub('[0-9: ]+', '\\1', format(created_at, '%r'))) %>%
arrange(created_at) %>%
select(device, everything())
graph <- train_tweets %>%
select(device, month) %>%
group_by(device, month) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
ggplot(aes(month, percent, color = device)) +
geom_line(size = 3) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
ggtitle("Tweet Activity per Month per Device") +
labs(y = "% of Tweets per Month",
color = "Device") +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(vjust = 3, size = 14),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
legend.text = element_text(size = 12)) +
scale_color_manual(values = duo_Palette) +
theme(panel.background = element_rect(fill = sky_blue))
duo_Palette
# Avoiding messages and warnings: anyway, they have already been dealt with.
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Regulating figure layout.
knitr::opts_chunk$set(out.width = "60%", fig.align = "center")
# Facilitating table layout in HTML.
options(knitr.table.format = "html")
# Output language
invisible(Sys.setlocale("LC_ALL", "C"))
# Picking up the main two colors: orange for Android and deep blue for iPhone. When used as background, they are used separately.
orange <- "#E69F00"
deep_blue <- "#0072B2"
# When used as main colors on one figure, both colors are combined in a duo palette just with orange and deep blue, the colors assigned to respectively Android and iPhone. Let's use a named vector as recommended.
duo_Palette <- c(Android = "#E69F00", iPhone = "#0072B2")
# This palette will be associated with sky blue background:
sky_blue <- "#56b4e9"
# Palette for white background color: orange, deep blue, black, sky blue, bluish green, vermilion and reddish purple (yellow has been omitted)
cbf_Palette_w_b <- c("#E69F00", "#0072B2", "#000000", "#56b4e9",
"#009E73", "#D55E00", "#CC79A7")
# Palette for orange background color: tense blue, black, sky blue, bluish green, vermilion and reddish purple (yellow has been omitted ... as well as orange)
cbf_Palette_o_b <- c("#0072B2", "#000000", "#56b4e9",
"#009E73", "#D55E00", "#CC79A7")
# Palette for deep blue background color: orange, sky blue, black, yellow, bluish green, vermilion and reddish purple
cbf_Palette_b_b <- c("#E69F00", "#56b4e9", "#000000", "#F0E442",
"#009E73", "#D55E00", "#CC79A7")
duo_Palette
# Cleaning up workspace for RAM management.
invisible(if(!is.null(dev.list())) dev.off())
rm(list=ls())
cat("\014")
# Package containing the dataset
if(!require(dslabs)) install.packages("dslabs", repos = "http://cran.us.r-project.org")
# Packages associated with tidyverse
# Other packages could be added to this group but have been
# linked to text processing.
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(scales)) install.packages("scales", repos = "http://cran.us.r-project.org")
if(!require(lubridate)) install.packages("lubridate", repos = "http://cran.us.r-project.org")
if(!require(ggthemes)) install.packages("ggthemes", repos = "http://cran.us.r-project.org")
# Packages associated with R Markdown
if(!require(kableExtra)) install.packages("kableExtra", repos = "http://cran.us.r-project.org")
if(!require(gridExtra)) install.packages("gridExtra", repos = "http://cran.us.r-project.org")
# Packages related to NLP, Text Mining or Sentiment Analysis
# If you get into trouble while trying to access lexicon ncr
# from package textdata, I suggest having a look at
# https://github.com/juliasilge/tidytext/issues/146 .
if(!require(utf8)) install.packages("utf8", repos = "http://cran.us.r-project.org")
if(!require(stringr)) install.packages("stringr", repos = "http://cran.us.r-project.org")
if(!require(tm)) install.packages("tm", repos = "http://cran.us.r-project.org")
if(!require(textreg)) install.packages("textreg", repos = "http://cran.us.r-project.org")
if(!require(quanteda)) install.packages("quanteda", repos = "http://cran.us.r-project.org")
if(!require(tidytext)) install.packages("tidytext", repos = "http://cran.us.r-project.org")
if(!require(textdata)) install.packages("textdata", repos = "http://cran.us.r-project.org")
# Packages associated with worclouds
# If you get into trouble with package and function wordcloud2,
# I suggest having a look at
# https://github.com/Lchiffon/wordcloud2/issues/65 .
if(!require(wordcloud)) install.packages("wordcloud", repos = "http://cran.us.r-project.org")
if(!require(wordcloud2)) install.packages("wordcloud2", repos = "http://cran.us.r-project.org")
if(!require(devtools)) install.packages("devtools", repos = "http://cran.us.r-project.org")
if(!require(shiny)) install.packages("shiny", repos = "http://cran.us.r-project.org")
if(!require(httpuv)) install.packages("httpuv", repos = "http://cran.us.r-project.org")
if(!require(xtable)) install.packages("xtable", repos = "http://cran.us.r-project.org")
if(!require(sourcetools)) install.packages("sourcetools", repos = "http://cran.us.r-project.org")
if(!require(fastmap)) install.packages("fastmap", repos = "http://cran.us.r-project.org")
# Packages for Machine Learning
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(kernlab)) install.packages("kernlab", repos = "http://cran.us.r-project.org")
if(!require(xgboost)) install.packages("xgboost", repos = "http://cran.us.r-project.org")
if(!require(pROC)) install.packages("pROC", repos = "http://cran.us.r-project.org")
# Requiring libraries.
library(dslabs)
library(tidyverse)
library(scales)
library(lubridate)
library(ggthemes)
library(kableExtra)
library(gridExtra)
library(utf8)
library(stringr)
library(tm)
library(textreg)
library(quanteda)
library(tidytext)
library(textdata)
library(wordcloud)
library(wordcloud2)
library(devtools)
library(shiny)
library(httpuv)
library(xtable)
library(sourcetools)
library(fastmap)
library(caret)
library(kernlab)
library(xgboost)
library(pROC)
# Prevents silently failing after the first wordcloud2.
# Please see https://github.com/Lchiffon/wordcloud2/issues/65 .
devtools::install_github("gaospecial/wordcloud2")
duo_Palette
# Avoiding messages and warnings: anyway, they have already been dealt with.
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Regulating figure layout.
knitr::opts_chunk$set(out.width = "60%", fig.align = "center")
# Facilitating table layout in HTML.
options(knitr.table.format = "html")
# Output language
invisible(Sys.setlocale("LC_ALL", "C"))
invisible(if(!is.null(dev.list())) dev.off())
rm(list=ls())
cat("\014")
# Picking up the main two colors: orange for Android and deep blue for iPhone. When used as background, they are used separately.
orange <- "#E69F00"
deep_blue <- "#0072B2"
# When used as main colors on one figure, both colors are combined in a duo palette just with orange and deep blue, the colors assigned to respectively Android and iPhone. Let's use a named vector as recommended.
duo_Palette <- c(Android = "#E69F00", iPhone = "#0072B2")
# This palette will be associated with sky blue background:
sky_blue <- "#56b4e9"
# Palette for white background color: orange, deep blue, black, sky blue, bluish green, vermilion and reddish purple (yellow has been omitted)
cbf_Palette_w_b <- c("#E69F00", "#0072B2", "#000000", "#56b4e9",
"#009E73", "#D55E00", "#CC79A7")
# Palette for orange background color: tense blue, black, sky blue, bluish green, vermilion and reddish purple (yellow has been omitted ... as well as orange)
cbf_Palette_o_b <- c("#0072B2", "#000000", "#56b4e9",
"#009E73", "#D55E00", "#CC79A7")
# Palette for deep blue background color: orange, sky blue, black, yellow, bluish green, vermilion and reddish purple
cbf_Palette_b_b <- c("#E69F00", "#56b4e9", "#000000", "#F0E442",
"#009E73", "#D55E00", "#CC79A7")
# Package containing the dataset
if(!require(dslabs)) install.packages("dslabs", repos = "http://cran.us.r-project.org")
# Packages associated with tidyverse
# Other packages could be added to this group but have been
# linked to text processing.
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(scales)) install.packages("scales", repos = "http://cran.us.r-project.org")
if(!require(lubridate)) install.packages("lubridate", repos = "http://cran.us.r-project.org")
if(!require(ggthemes)) install.packages("ggthemes", repos = "http://cran.us.r-project.org")
# Packages associated with R Markdown
if(!require(kableExtra)) install.packages("kableExtra", repos = "http://cran.us.r-project.org")
if(!require(gridExtra)) install.packages("gridExtra", repos = "http://cran.us.r-project.org")
# Packages related to NLP, Text Mining or Sentiment Analysis
# If you get into trouble while trying to access lexicon ncr
# from package textdata, I suggest having a look at
# https://github.com/juliasilge/tidytext/issues/146 .
if(!require(utf8)) install.packages("utf8", repos = "http://cran.us.r-project.org")
if(!require(stringr)) install.packages("stringr", repos = "http://cran.us.r-project.org")
if(!require(tm)) install.packages("tm", repos = "http://cran.us.r-project.org")
if(!require(textreg)) install.packages("textreg", repos = "http://cran.us.r-project.org")
if(!require(quanteda)) install.packages("quanteda", repos = "http://cran.us.r-project.org")
if(!require(tidytext)) install.packages("tidytext", repos = "http://cran.us.r-project.org")
if(!require(textdata)) install.packages("textdata", repos = "http://cran.us.r-project.org")
# Packages associated with worclouds
# If you get into trouble with package and function wordcloud2,
# I suggest having a look at
# https://github.com/Lchiffon/wordcloud2/issues/65 .
if(!require(wordcloud)) install.packages("wordcloud", repos = "http://cran.us.r-project.org")
if(!require(wordcloud2)) install.packages("wordcloud2", repos = "http://cran.us.r-project.org")
if(!require(devtools)) install.packages("devtools", repos = "http://cran.us.r-project.org")
if(!require(shiny)) install.packages("shiny", repos = "http://cran.us.r-project.org")
if(!require(httpuv)) install.packages("httpuv", repos = "http://cran.us.r-project.org")
if(!require(xtable)) install.packages("xtable", repos = "http://cran.us.r-project.org")
if(!require(sourcetools)) install.packages("sourcetools", repos = "http://cran.us.r-project.org")
if(!require(fastmap)) install.packages("fastmap", repos = "http://cran.us.r-project.org")
# Packages for Machine Learning
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(kernlab)) install.packages("kernlab", repos = "http://cran.us.r-project.org")
if(!require(xgboost)) install.packages("xgboost", repos = "http://cran.us.r-project.org")
if(!require(pROC)) install.packages("pROC", repos = "http://cran.us.r-project.org")
# Requiring libraries.
library(dslabs)
library(tidyverse)
library(scales)
library(lubridate)
library(ggthemes)
library(kableExtra)
library(gridExtra)
library(utf8)
library(stringr)
library(tm)
library(textreg)
library(quanteda)
library(tidytext)
library(textdata)
library(wordcloud)
library(wordcloud2)
library(devtools)
library(shiny)
library(httpuv)
library(xtable)
library(sourcetools)
library(fastmap)
library(caret)
library(kernlab)
library(xgboost)
library(pROC)
# Prevents silently failing after the first wordcloud2.
# Please see https://github.com/Lchiffon/wordcloud2/issues/65 .
devtools::install_github("gaospecial/wordcloud2")
data("trump_tweets")
tweets <- trump_tweets %>%
mutate(text = sapply(text, utf8_normalize, map_quote = TRUE))
# Otherwise curly apostrophes remain.
str(tweets, vec.len = 1)
sum(tweets$is_retweet)
sum(is.na(tweets$in_reply_to_user_id_str))/nrow(tweets)
buffer <- tweets %>%
mutate(device = str_replace_all(
str_replace_all(source, "Twitter for Android", "Android"),
"Twitter for iPhone", "iPhone")) %>%
filter(device %in% c("Android", "iPhone") &
created_at >= ymd("2015-06-17") &
created_at < ymd("2016-11-08")) %>%
select(- is_retweet, - source)
rm(tweets)
buffer %>%
group_by(device) %>%
summarise(n = n()) %>%
arrange(desc(n))
set.seed(1)
ind_val <- createDataPartition(y = buffer$device,
times = 1, p = 1/3, list = FALSE)
ind_train <- as.integer(setdiff(1:nrow(buffer), ind_val))
train_tweets <- buffer[ind_train, ]
val_tweets <- buffer[ind_val, ]
rm(buffer)
train_tweets %>%
group_by(device) %>%
summarise(n = n()) %>%
arrange(desc(n))
train_tweets <- train_tweets %>%
mutate(month = floor_date(with_tz(created_at, "EST"), unit = "month")) %>%
mutate(week = floor_date(with_tz(created_at, "EST"), unit = "week")) %>%
mutate(day = floor_date(with_tz(created_at, "EST"), unit = "day")) %>%
mutate(hour = hour(with_tz(created_at, "EST"))) %>%
mutate(am_pm = gsub('[0-9: ]+', '\\1', format(created_at, '%r'))) %>%
arrange(created_at) %>%
select(device, everything())
graph <- train_tweets %>%
select(device, month) %>%
group_by(device, month) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
ggplot(aes(month, percent, color = device)) +
geom_line(size = 3) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
ggtitle("Tweet Activity per Month per Device") +
labs(y = "% of Tweets per Month",
color = "Device") +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(vjust = 3, size = 14),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
legend.text = element_text(size = 12)) +
scale_color_manual(values = duo_Palette) +
theme(panel.background = element_rect(fill = sky_blue))
graph
graph <- train_tweets %>%
select(device, month) %>%
group_by(device, month) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
ggplot(aes(month, percent, color = device)) +
geom_line(size = 3) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
ggtitle("Tweet Activity per Month per Device") +
labs(y = "% of Tweets per Month",
color = "Device") +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(vjust = 3, size = 14),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12)) +
scale_color_manual(values = duo_Palette) +
theme(panel.background = element_rect(fill = sky_blue))
graph
graph <- train_tweets %>%
select(device, month) %>%
group_by(device, month) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
ggplot(aes(month, percent, color = device)) +
geom_line(size = 3) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
ggtitle("Tweet Activity per Month per Device") +
labs(y = "% of Tweets per Month",
color = "Device") +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(vjust = 3, size = 14),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)) +
scale_color_manual(values = duo_Palette) +
theme(panel.background = element_rect(fill = sky_blue))
graph
graph <- train_tweets %>%
select(device, month) %>%
group_by(device, month) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
ggplot(aes(month, percent, color = device)) +
geom_line(size = 3) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
ggtitle("Tweet Activity per Month per Device") +
labs(y = "% of Tweets per Month",
color = "Device") +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(vjust = 3, size = 14),
legend.title = element_text(size = 14),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
legend.text = element_text(size = 12)) +
scale_color_manual(values = duo_Palette) +
theme(panel.background = element_rect(fill = sky_blue))
graph
graph <- train_tweets %>%
select(device, month) %>%
group_by(device, month) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
ggplot(aes(month, percent, color = device)) +
geom_line(size = 3) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
ggtitle("Tweet Activity per Month per Device") +
labs(y = "% of Tweets per Month",
color = "Device") +
theme(plot.title = element_text(hjust = 0.5, vjust = 2,
size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(vjust = 3, size = 14),
legend.title = element_text(size = 14),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
legend.text = element_text(size = 12)) +
scale_color_manual(values = duo_Palette) +
theme(panel.background = element_rect(fill = sky_blue))
graph
graph <- train_tweets %>%
select(device, month) %>%
group_by(device, month) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
ggplot(aes(month, percent, color = device)) +
geom_line(size = 3) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
ggtitle("Tweet Activity per Month per Device") +
labs(y = "% of Tweets per Month",
color = "Device") +
theme(plot.title = element_text(hjust = 0.5, vjust = 3,
size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(vjust = 3, size = 14),
legend.title = element_text(size = 14),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
legend.text = element_text(size = 12)) +
scale_color_manual(values = duo_Palette) +
theme(panel.background = element_rect(fill = sky_blue))
graph
graph <- train_tweets %>%
select(device, month) %>%
group_by(device, month) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
ggplot(aes(month, percent, color = device)) +
geom_line(size = 3) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
ggtitle("Tweet Activity per Month per Device") +
labs(y = "% of Tweets per Month",
color = "Device") +
theme(plot.title = element_text(hjust = 0.5, vjust = 4,
size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(vjust = 3, size = 14),
legend.title = element_text(size = 14),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
legend.text = element_text(size = 12)) +
scale_color_manual(values = duo_Palette) +
theme(panel.background = element_rect(fill = sky_blue))
graph
graph <- train_tweets %>%
select(device, month) %>%
group_by(device, month) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
ggplot(aes(month, percent, color = device)) +
geom_line(size = 3) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
ggtitle("Tweet Activity per Month per Device") +
labs(y = "% of Tweets per Month",
color = "Device") +
theme(plot.title = element_text(hjust = 0.5, vjust = 3.5,
size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(vjust = 3, size = 14),
legend.title = element_text(size = 14),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
legend.text = element_text(size = 12)) +
scale_color_manual(values = duo_Palette) +
theme(panel.background = element_rect(fill = sky_blue))
graph
graph <- train_tweets %>%
select(device, month) %>%
group_by(device, month) %>%
summarize(n = n()) %>%
mutate(percent = n / sum(n)) %>%
ggplot(aes(month, percent, color = device)) +
geom_line(size = 3) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
ggtitle("Tweet Activity per Month per Device") +
labs(y = "% of Tweets per Month",
color = "Device") +
theme(plot.title = element_text(hjust = 0.5, vjust = 3,
size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_text(vjust = 3, size = 14),
legend.title = element_text(size = 14),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
legend.text = element_text(size = 12)) +
scale_color_manual(values = duo_Palette) +
theme(panel.background = element_rect(fill = sky_blue))
graph
tweets_per_day <- train_tweets %>%
select(device, day) %>%
group_by(day) %>%
summarize(n = n())
# Let's pick up a sample at random
sample_size <- 6
set.seed(1)
seq <- sample(1:nrow(train_discrete), sample_size, replace = FALSE)
tweets_per_day <- train_tweets %>%
select(device, day) %>%
group_by(day) %>%
summarize(n = n())
# Let's pick up a sample at random
sample_size <- 6
set.seed(1)
seq <- sample(1:nrow(tweets_per_day), sample_size, replace = FALSE)
random_sample <- tweets_per_day[seq]
tweets_per_day <- train_tweets %>%
select(device, day) %>%
group_by(day) %>%
summarize(n = n())
# Let's pick up a sample at random
sample_size <- 6
set.seed(1)
seq <- sample(1:nrow(tweets_per_day), sample_size, replace = FALSE)
random_sample <- tweets_per_day[seq, ]
